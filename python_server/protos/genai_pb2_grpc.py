# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protos.genai_pb2 as genai__pb2


class GenerativeAIStub(object):
    """
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TextSplit = channel.unary_unary(
                '/genai.GenerativeAI/TextSplit',
                request_serializer=genai__pb2.TextSplitRequest.SerializeToString,
                response_deserializer=genai__pb2.TextSplitResponse.FromString,
                )
        self.QuestionAnwser = channel.unary_unary(
                '/genai.GenerativeAI/QuestionAnwser',
                request_serializer=genai__pb2.QARequest.SerializeToString,
                response_deserializer=genai__pb2.QAResponse.FromString,
                )
        self.MultipleChoice = channel.unary_unary(
                '/genai.GenerativeAI/MultipleChoice',
                request_serializer=genai__pb2.MCRequest.SerializeToString,
                response_deserializer=genai__pb2.MCResponse.FromString,
                )


class GenerativeAIServicer(object):
    """
    """

    def TextSplit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuestionAnwser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MultipleChoice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GenerativeAIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TextSplit': grpc.unary_unary_rpc_method_handler(
                    servicer.TextSplit,
                    request_deserializer=genai__pb2.TextSplitRequest.FromString,
                    response_serializer=genai__pb2.TextSplitResponse.SerializeToString,
            ),
            'QuestionAnwser': grpc.unary_unary_rpc_method_handler(
                    servicer.QuestionAnwser,
                    request_deserializer=genai__pb2.QARequest.FromString,
                    response_serializer=genai__pb2.QAResponse.SerializeToString,
            ),
            'MultipleChoice': grpc.unary_unary_rpc_method_handler(
                    servicer.MultipleChoice,
                    request_deserializer=genai__pb2.MCRequest.FromString,
                    response_serializer=genai__pb2.MCResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'genai.GenerativeAI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GenerativeAI(object):
    """
    """

    @staticmethod
    def TextSplit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/genai.GenerativeAI/TextSplit',
            genai__pb2.TextSplitRequest.SerializeToString,
            genai__pb2.TextSplitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QuestionAnwser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/genai.GenerativeAI/QuestionAnwser',
            genai__pb2.QARequest.SerializeToString,
            genai__pb2.QAResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MultipleChoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/genai.GenerativeAI/MultipleChoice',
            genai__pb2.MCRequest.SerializeToString,
            genai__pb2.MCResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
