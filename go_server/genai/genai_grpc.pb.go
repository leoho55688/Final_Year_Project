// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: genai/genai.proto

package genai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GenerativeAI_TextSplit_FullMethodName      = "/genai.GenerativeAI/TextSplit"
	GenerativeAI_QuestionAnwser_FullMethodName = "/genai.GenerativeAI/QuestionAnwser"
	GenerativeAI_MultipleChoice_FullMethodName = "/genai.GenerativeAI/MultipleChoice"
)

// GenerativeAIClient is the client API for GenerativeAI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenerativeAIClient interface {
	TextSplit(ctx context.Context, in *TextSplitRequest, opts ...grpc.CallOption) (*TextSplitResponse, error)
	QuestionAnwser(ctx context.Context, in *QARequest, opts ...grpc.CallOption) (*QAResponse, error)
	MultipleChoice(ctx context.Context, in *MCRequest, opts ...grpc.CallOption) (*MCResponse, error)
}

type generativeAIClient struct {
	cc grpc.ClientConnInterface
}

func NewGenerativeAIClient(cc grpc.ClientConnInterface) GenerativeAIClient {
	return &generativeAIClient{cc}
}

func (c *generativeAIClient) TextSplit(ctx context.Context, in *TextSplitRequest, opts ...grpc.CallOption) (*TextSplitResponse, error) {
	out := new(TextSplitResponse)
	err := c.cc.Invoke(ctx, GenerativeAI_TextSplit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generativeAIClient) QuestionAnwser(ctx context.Context, in *QARequest, opts ...grpc.CallOption) (*QAResponse, error) {
	out := new(QAResponse)
	err := c.cc.Invoke(ctx, GenerativeAI_QuestionAnwser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generativeAIClient) MultipleChoice(ctx context.Context, in *MCRequest, opts ...grpc.CallOption) (*MCResponse, error) {
	out := new(MCResponse)
	err := c.cc.Invoke(ctx, GenerativeAI_MultipleChoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenerativeAIServer is the server API for GenerativeAI service.
// All implementations must embed UnimplementedGenerativeAIServer
// for forward compatibility
type GenerativeAIServer interface {
	TextSplit(context.Context, *TextSplitRequest) (*TextSplitResponse, error)
	QuestionAnwser(context.Context, *QARequest) (*QAResponse, error)
	MultipleChoice(context.Context, *MCRequest) (*MCResponse, error)
	mustEmbedUnimplementedGenerativeAIServer()
}

// UnimplementedGenerativeAIServer must be embedded to have forward compatible implementations.
type UnimplementedGenerativeAIServer struct {
}

func (UnimplementedGenerativeAIServer) TextSplit(context.Context, *TextSplitRequest) (*TextSplitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextSplit not implemented")
}
func (UnimplementedGenerativeAIServer) QuestionAnwser(context.Context, *QARequest) (*QAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuestionAnwser not implemented")
}
func (UnimplementedGenerativeAIServer) MultipleChoice(context.Context, *MCRequest) (*MCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultipleChoice not implemented")
}
func (UnimplementedGenerativeAIServer) mustEmbedUnimplementedGenerativeAIServer() {}

// UnsafeGenerativeAIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenerativeAIServer will
// result in compilation errors.
type UnsafeGenerativeAIServer interface {
	mustEmbedUnimplementedGenerativeAIServer()
}

func RegisterGenerativeAIServer(s grpc.ServiceRegistrar, srv GenerativeAIServer) {
	s.RegisterService(&GenerativeAI_ServiceDesc, srv)
}

func _GenerativeAI_TextSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextSplitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerativeAIServer).TextSplit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerativeAI_TextSplit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerativeAIServer).TextSplit(ctx, req.(*TextSplitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenerativeAI_QuestionAnwser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerativeAIServer).QuestionAnwser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerativeAI_QuestionAnwser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerativeAIServer).QuestionAnwser(ctx, req.(*QARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenerativeAI_MultipleChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerativeAIServer).MultipleChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerativeAI_MultipleChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerativeAIServer).MultipleChoice(ctx, req.(*MCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenerativeAI_ServiceDesc is the grpc.ServiceDesc for GenerativeAI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenerativeAI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genai.GenerativeAI",
	HandlerType: (*GenerativeAIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TextSplit",
			Handler:    _GenerativeAI_TextSplit_Handler,
		},
		{
			MethodName: "QuestionAnwser",
			Handler:    _GenerativeAI_QuestionAnwser_Handler,
		},
		{
			MethodName: "MultipleChoice",
			Handler:    _GenerativeAI_MultipleChoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "genai/genai.proto",
}
